Docker cli:
docker -v
docker run hello-world
docker images
docker pull ubuntu
docker run -it -d ubuntu
docker ps -a
docker exec -it <containerID> bash
docker stop <containerID>
docker run -it ubuntu bash
docker search ubuntu
docker login
docker start <containerID>

Creating an image:
first create a js where you write -
console.log("Docker img using Dockerfile")
then in the Dockerfile write -
FROM node:alpine
WORKDIR /app
COPY . /app
CMD ["node", "app.js"]
docker build -t myimage
docker images
then go to docker destop search the image and run, you should see output
docker tag myimage <yourDockerName>/myimage
docker push <yourDockerName>/myimage

docker compose :
open a folder, then create a docker-compose.yml file in Vs code
docker compose up -d
docker compose down
docker compose up --scale <servicename>=2 -d

DEPLOYING AND SCALING APPLICATIONS USING MINIKUBE
1.	Install Minikube
2.	Set the environment variables
3.	minikube start (minikube start --driver=docker)
4.	docker login
5.	Minikube status
6.	kubectl create deployment mynginx --image=nginx
7.	kubectl get deployments
8.	kubectl describe pods
9.	kubectl get pods
10.	kubectl scale deployment mynginx â€“replicas=5    // scaling
11.	kubectl get deployments
12.	kubectl get pods (-A) //  we can see the 5 instance s of Mynginx


13.	kubectl expose deployment mynginx --type=NodePort --port=80 --target-port=80                                       //  service mynginx is  exposed
14.	kubectl port-forward svc/mynginx 8081:80   // forward the traffic from one port to onother i.e 8081 ( http://localhost:8081)
15.	minikube dashboard
16.	kubectl delete deployments mynginx
17.	kubectl delete service mynginx 
18.	minikube stop
then for wordpress open localhost:8000 and setup wordpress
docker compose down

NAGIOS :
docker pull jasonrivers/nagios:latest
docker run --name nagiosdemo -p 8888:80 jasonrivers/nagios:latest
go to localhost:8888, user - nagiosadmin, pass - nagios

